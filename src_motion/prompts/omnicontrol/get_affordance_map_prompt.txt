import numpy as np
from perception_utils import parse_query_obj
from plan_utils import get_empty_affordance_map, set_voxel_by_radius, cm2index

# Query: a point 10cm in front of [10, 15, 60].
affordance_map = get_empty_affordance_map()
# 10cm in front of so we add to x-axis
x = 10 + cm2index(10, 'x')
y = 15
z = 60
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: a point on the right side of the table.
affordance_map = get_empty_affordance_map()
table = parse_query_obj('table')
(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb
center_x, center_y, center_z = table.position_voxel
# right side so y = max_y
x = center_x
y = max_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: a point 20cm on top of the chair.
affordance_map = get_empty_affordance_map()
chair = parse_query_obj('chair')
(min_x, min_y, min_z), (max_x, max_y, max_z) = chair.aabb
center_x, center_y, center_z = chair.position_voxel
# 20cm on top of so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(20, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: a point around the table.
affordance_map = get_empty_affordance_map()
table = parse_query_obj('table')
# around means about 1 meters away from the table.
set_voxel_by_radius(affordance_map, table.position_voxel, radius_cm=100, value=1)
ret_val = affordance_map

# Query: a path along the table.
affordance_map = get_empty_affordance_map()
table = parse_query_obj('table')
# along means the same as around
set_voxel_by_radius(affordance_map, table.position_voxel, radius_cm=100, value=1)
ret_val = affordance_map

# Query: a point on the table to lean against.
affordance_map = get_empty_affordance_map()
table = parse_query_obj('table')
(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb
center_x, center_y, center_z = table.position_voxel
# Leaning against implies at the edge, typically at the back edge
x = min_x
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: a point 60cm to the left of the bed.
affordance_map = get_empty_affordance_map()
bed = parse_query_obj('bed')
(min_x, min_y, min_z), (max_x, max_y, max_z) = bed.aabb
center_x, center_y, center_z = bed.position_voxel
# 60cm to the left of so we subtract from y-axis
x = center_x
y = min_y - cm2index(60, 'y')
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: anywhere within 100cm of the dustbin.
affordance_map = get_empty_affordance_map()
dustbin = parse_query_obj('dustbin')
set_voxel_by_radius(affordance_map, dustbin.position_voxel, radius_cm=100, value=1)
ret_val = affordance_map

# Query: a point on the back side of the table.
affordance_map = get_empty_affordance_map()
table = parse_query_obj('table')
(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb
center_x, center_y, center_z = table.position_voxel
# back side so x = min_x
x = min_x
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: a point on the front right corner of the table.
affordance_map = get_empty_affordance_map()
table = parse_query_obj('table')
(min_x, min_y, min_z), (max_x, max_y, max_z) = table.aabb
center_x, center_y, center_z = table.position_voxel
# front right corner so x = max_x and y = max_y
x = max_x
y = max_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: a point 20cm above the chair.
affordance_map = get_empty_affordance_map()
chair = parse_query_obj('chair')
(min_x, min_y, min_z), (max_x, max_y, max_z) = chair.aabb
center_x, center_y, center_z = chair.position_voxel
# 5cm above so we add to z-axis
x = center_x
y = center_y
z = max_z + cm2index(20, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map




# Query: a point 10cm to the right of [45 49 66], and 5cm above it.
affordance_map = get_empty_affordance_map()
# 10cm to the right of so we add to y-axis, and 5cm above it so we add to z-axis
x = 45
y = 49 + cm2index(10, 'y')
z = 66 + cm2index(5, 'z')
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: the blue curtain.
affordance_map = get_empty_affordance_map()
blue_curtain = parse_query_obj('blue curtain')
affordance_map = blue_curtain.occupancy_map
ret_val = affordance_map

# Query: pillow
affordance_map = get_empty_affordance_map()
pillow = parse_query_obj('pillow')
center_x, center_y, center_z = pillow.position_voxel
x = center_x
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map

# Query: desk
affordance_map = get_empty_affordance_map()
desk = parse_query_obj('desk')
center_x, center_y, center_z = desk.position_voxel
x = center_x
y = center_y
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map

